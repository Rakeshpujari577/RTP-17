pip install ultralytics opencv-python pandas
import cv2
from ultralytics import YOLO

# Load YOLOv8 model
model = YOLO('yolov8n.pt')  # You can choose other variants like yolov8s.pt, yolov8m.pt, etc.

# Define the video input and output
input_video_path = r'C:\Users\pujar\OneDrive\Desktop\sample_video.mp4'  
output_video_path = r'C:\Users\pujar\OneDrive\Desktop\output.mp4'  # Added file name to output path

# Initialize video capture
cap = cv2.VideoCapture(input_video_path)
if not cap.isOpened():
    print(f"Error opening video file {input_video_path}")
    exit()

# Get video properties
frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
fps = int(cap.get(cv2.CAP_PROP_FPS))

# Initialize video writer
fourcc = cv2.VideoWriter_fourcc(*'mp4v')  # Codec for .mp4 file
out = cv2.VideoWriter(output_video_path, fourcc, fps, (frame_width, frame_height))

# Initialize total vehicle count
total_vehicle_count = 0

# Process the video
while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break
    
    # Perform vehicle detection
    results = model(frame)
    
    # Count the number of vehicles detected in this frame
    current_vehicle_count = len(results[0].boxes)  # Assuming 'boxes' holds the detected objects
    
    # Update the total vehicle count
    total_vehicle_count += current_vehicle_count
    
    # Annotate the frame with the current count and total count
    annotated_frame = frame.copy()  # Copy the frame to render annotations
    for result in results:
        annotated_frame = result.plot()  # Use plot() method to render annotations
    
    # Display the vehicle count on the frame
    cv2.putText(annotated_frame, f'Vehicles detected: {current_vehicle_count}', 
                (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA)
    cv2.putText(annotated_frame, f'Total vehicles: {total_vehicle_count}', 
                (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA)
    
    # Write the annotated frame to the output video
    out.write(annotated_frame)
    
    # Display the frame (optional, for visualization purposes)
    # Commented out because of GUI support issue
    # cv2.imshow('Frame', annotated_frame)
    # if cv2.waitKey(1) & 0xFF == ord('q'):
    #     break

# Release resources
cap.release()
out.release()
cv2.destroyAllWindows()

print(f"Processed video saved as {output_video_path}")
print(f"Total vehicles detected: {total_vehicle_count}")
